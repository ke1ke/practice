//旋转数组的最小数字
//题目：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。

//旋转数组，有两个递增序列
# include<iostream>

//常规查找，从给定的序列中一个一个遍历
int MinInorder(int* numbers,int index1,int index2)
{
	int result=numbers[index1];
	for(int i=index1+1;i<index2;i++)
	{
		if(result>numbers[i])
		{
			result=numbers[i];
		}
		
	}
	return result;
}
int Min(int* numbers,int length)
{
	if(numbers==NULL||length<0)
	{
		throw new std::exception("erro array");
	}

	int index1=0;//第一个指针
	int index2=length-1;//第二个指针
	int indexMid=index1;//序列中间位置（序列中最大值得位置）

	//找最小位置
	while(numbers[index1]>=numbers[index2])
	{
		if(index2-index1==1)//只有两个元素，最小的即为后面的index2的位置
		{
			indexMid=index2;
			break;
		}

		indexMid=(index1+index2)/2;//把indexMid指向 中间位置

		//考虑到数组中有重复的数字
		if(numbers[index1]==numbers[index2]&&numbers[indexMid]==numbers[index1])
		{
			return MinInorder(numbers,index1,index2);
		}
    
		if(numbers[indexMid]>=numbers[index1])
		{
			index1=indexMid;
		}
		else if(numbers[indexMid]<=numbers[index2])
		{
			index2=indexMid;
		}
	}
	return numbers[indexMid];
}
