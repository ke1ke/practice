//面试题13：机器人的运动范围
//题目：地上有一个m行n列的方格。一个机器人从坐标（0,0）的格子开始移动，它每次可以从左右上下移动一格，但不能进入行坐标和
//列坐标的数位之和大于k的格子。即（35,37）因为3+5+3+7=18当k=18时该位置是有效的，若k=17该位置则为无效，
//请问该机器人能到达多少个格子。
//思路：该题和面试题12比较类似，都可以用回溯法解决，只是判断条件不同

# include<iostream>

//二位数字的位数之和
int getDigitSum(int number)
{
	int sum=0;
	while(number>0)//
	{
		sum+=number%10;//取个位数
		number/=10;//取十位数
	}
	return sum;
}

//检查这个位置是否符合规定
bool check(int key,int rows,int cols,int row,int col,bool* visited)
{
	if(row>=0 && row<rows && col>=0 && col<cols
		&& getDigitSum(row)+getDigitSum(col)<=key
		&& !visited[rows*cols+col])
	{
		return true;
	}
	return false;
}


int movingCountCore(int key,int rows,int cols,int row,int col,bool* visited)
{
	int count=0;
	if(check(key,rows,cols,row,col,visited))
	{
		visited[rows*cols+col]=true;

		//需要考虑到这个位置的上下左右位置是否都有效
		count=1+movingCountCore(key,rows,cols,row-1,col,visited)
			+movingCountCore(key,rows,cols,row+1,col,visited)+
			movingCountCore(key,rows,cols,row,col-1,visited)+
			movingCountCore(key,rows,cols,row,col+1,visited);
	}
	return count;
}


int movingCount(int key,int rows,int cols)//key为规定的K值,
{
	if(key<0||rows<=0||cols<=0)
	{
		return 0;
	}

	//存放该位置是否有效的数组
	bool* visited=new bool[rows*cols];

	for(int i=0;i<rows*cols;++i)
	{
		visited[i]=false;
	}

	//count即为所求的机器人能够达到的格子数
	int count=movingCountCore(key,rows,cols,0,0,visited);

	delete[] visited;
	return count;
}

// ====================测试代码====================
void test(char* testName, int threshold, int rows, int cols, int expected)
{
    if(testName != nullptr)
        printf("%s begins: ", testName);

    if(movingCount(threshold, rows, cols) == expected)
        printf("Passed.\n");
    else
        printf("FAILED.\n");
}

// 方格多行多列
void test1()
{
    test("Test1", 5, 10, 10, 21);
}

// 方格多行多列
void test2()
{
    test("Test2", 15, 20, 20, 359);
}

// 方格只有一行，机器人只能到达部分方格
void test3()
{
    test("Test3", 10, 1, 100, 29);
}

// 方格只有一行，机器人能到达所有方格
void test4()
{
    test("Test4", 10, 1, 10, 10);
}

// 方格只有一列，机器人只能到达部分方格
void test5()
{
    test("Test5", 15, 100, 1, 79);
}

// 方格只有一列，机器人能到达所有方格
void test6()
{
    test("Test6", 15, 10, 1, 10);
}

// 方格只有一行一列
void test7()
{
    test("Test7", 15, 1, 1, 1);
}

// 方格只有一行一列
void test8()
{
    test("Test8", 0, 1, 1, 1);
}

// 机器人不能进入任意一个方格
void test9()
{
    test("Test9", -10, 10, 10, 0);
}

int main(int agrc, char* argv[])
{
    test1();
    test2();
    test3();
    test4();
    test5();
    test6();
    test7();
    test8();
    test9();

    return 0;
}
